import { useEffect } from 'react'
import Head from 'next/head'
import { useSelector, useDispatch } from 'react-redux'
import useForm from '../../hooks/useForm'
import { toast } from 'react-toastify'
import { setUserInfo } from '../../store/slices/globalSlice'
import { PageWrap, ColumnGridWrap, InputForm, DateBirthForm, ButtonLoading } from '../../components/global/form'
import { initialData, profileSchema } from '../../schemas/profileSchema'
import { updateUserService } from '../../services/usersService'
import { FORM_ERRORS, AXIOS_ERROR, SUCCESSFUL_SAVE } from '../../constants/responses'
import { getTheme } from '../../modules/helperFunctions'
import { searchUserService } from '../../services/usersService'

export default function Profile () {

    const {userInfo} = useSelector(state => state.global)

    const dispatch = useDispatch()

    const {data, setData, errors, setErrors, mapYupErrors, isSubmit, setIsSubmit, inputHandler} = useForm(initialData)

    useEffect(() => {
        searchUserService('email', userInfo.email).then(({data: {data: resData}}) => {
            setData(resData[0])
        })
    }, [])

    const submitHandler = async e => {
        try {
            e.preventDefault()
            setIsSubmit('update')
            await profileSchema().validate(data, {abortEarly: false})
            await update()
            setErrors({})
            toast.success(SUCCESSFUL_SAVE, {...getTheme()})
        } catch (errors) {
            console.log(errors)
            if (errors?.name === 'AxiosError') return toast.error(AXIOS_ERROR, {...getTheme()})
            setErrors(mapYupErrors(errors))
            toast.error(FORM_ERRORS, {...getTheme()})
        } finally {
            setIsSubmit('')
        }
    }

    const update = () => {
        return new Promise(async (resolve, reject) => {
            try {
                await updateUserService(data)
                dispatch(setUserInfo(data))
                return resolve()
            } catch (err) {
                return reject(err)
            }
        })
    }

    return (
        <PageWrap variant="panel">
            <Head>
                <title>پروفایل</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <form onSubmit={submitHandler}>
                <ColumnGridWrap>
                    <InputForm label="نام" keyname="name" value={data.name} error={errors.name} inputHandler={inputHandler} />
                    <InputForm label="فامیل" keyname="family" value={data.family} error={errors.family} inputHandler={inputHandler} />
                </ColumnGridWrap>

                <ColumnGridWrap>
                    <DateBirthForm label="تاریخ تولد" value={{day: data.day, month: data.month, year: data.year}} selected={{day: 3, month: 'دی', year: '1365'}} error={errors.dateBirth} inputHandler={inputHandler} />
                    <InputForm label="کد ملی" keyname="code" value={data.code} error={errors.code} inputHandler={inputHandler} />
                </ColumnGridWrap>

                <ColumnGridWrap>
                    <InputForm label="شماره موبایل" keyname="mobile" value={data.mobile} error={errors.mobile} inputHandler={inputHandler} />
                    <InputForm disabled label="ایمیل" keyname="email" value={data.email} error={errors.email} inputHandler={inputHandler} />
                </ColumnGridWrap>

                <div className="text-left space-x-reverse space-x-3 mt-6">
                    <ButtonLoading isSubmit={isSubmit} type="submit" size="md">ذخیره</ButtonLoading>
                </div>
            </form>
        </PageWrap>
    )
}

Profile.layout = 'panel'